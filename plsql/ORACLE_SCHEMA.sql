DROP TABLE VENDA;

CREATE TABLE VENDA(
 ID_VENDA NUMBER NOT NULL PRIMARY KEY,
 COD_LOJA NUMBER NOT NULL,
 DT_VENDA DATE DEFAULT SYSDATE NOT NULL,
 COD_CUPOM VARCHAR2(10)
);

--CRIA ACL DE PERMISSÃO PARA QUE A PACKAGE UTL_HTTP TENHA ACESSO À URL DA API
BEGIN
  DBMS_NETWORK_ACL_ADMIN.CREATE_ACL (
    ACL         => 'utl_http.xml',
    DESCRIPTION => 'HTTP Access',
    PRINCIPAL   => 'SYS', 
    IS_GRANT    => TRUE,
    PRIVILEGE   => 'connect'
  );
  
--ASSOCIA O ENDERECO DA API A ACL RECEM CRIADA    
  DBMS_NETWORK_ACL_ADMIN.ASSIGN_ACL (
    ACL        => 'utl_http.xml',
    HOST       => 'americanas-backend-api.herokuapp.com'
  );
  COMMIT;
END;

BEGIN
DBMS_NETWORK_ACL_ADMIN.ADD_PRIVILEGE(
    acl => 'utl_http.xml',
    principal => 'SYS',
    is_grant => true,
    privilege => 'resolve');
    COMMIT;
END;

/
-- COMO O ENDEREÇO DA API ESTA USANDO HTTPS É NECESSARIO CONFIGURAR O ORACLE PARA BUSCAR MINHA ORACLE WALLET COM O CERTIFICADO
BEGIN
   UTL_HTTP.SET_WALLET('');
END;
/

--SEQUENCE PARA O ID DA VENDA
DROP SEQUENCE VENDA_SEQ;
CREATE SEQUENCE VENDA_SEQ
 START WITH     1
 INCREMENT BY   1
 NOCACHE
 NOCYCLE;
 
--FUNCAO QUE FAZ O REQUEST DO CUPOM PARA A API
CREATE OR REPLACE FUNCTION GET_CUPOM
RETURN VARCHAR2
IS 
    V_COD_CUPOM VARCHAR2(10);
BEGIN
    SELECT JSON_VALUE(UTL_HTTP.REQUEST('https://americanas-backend-api.herokuapp.com/cupom/'),'$.cod_cupom') 
    INTO V_COD_CUPOM
    FROM DUAL;
    
    IF LENGTH(V_COD_CUPOM) != 8 THEN
        RETURN NULL;
    ELSE
        RETURN V_COD_CUPOM;
    END IF;
END;

--TRIGGER PARA VALIDAÇÃO DA INSERÇÃO DE VENDA
CREATE OR REPLACE TRIGGER AUD_VENDA
BEFORE INSERT ON VENDA
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        --BUSCA O ID DA SEQUENCE CRIADA
        IF :NEW.ID_VENDA IS NULL THEN
            SELECT VENDA_SEQ.NEXTVAL INTO :NEW.ID_VENDA FROM DUAL;
        END IF;
        -- BUSCA O CODIGO DO CUPOM DA API CRIADA
        IF :NEW.COD_CUPOM IS NULL THEN
            SELECT GET_CUPOM() INTO :NEW.COD_CUPOM FROM DUAL;
        END IF;
    END IF;
END;

INSERT INTO VENDA (ID_VENDA, COD_LOJA, COD_CUPOM) VALUES (NULL, 1, NULL);
COMMIT;

DROP TABLE ITEM_VENDA; 

CREATE TABLE ITEM_VENDA (
    ID_VENDA NUMBER NOT NULL,       -- ID DA VENDA, REFERENCIA A TABELA VENDA
    SEQ_ITEM NUMBER NOT NULL,       -- SEQUENCIAL DO ITEM PARA ESTA VENDA
    COD_PRODUTO NUMBER NOT NULL,    -- CODIGO DO ITEM (SKU)
    COD_DEPOSITO NUMBER NOT NULL,   -- CODIGO DO DEPOSITO A SER MOVIMENTADO
    QT_ITEM NUMBER NOT NULL,        -- QUANTIDADE DO ITEM
    TIPO_OPERACAO VARCHAR2(1),       -- SE É BAIXA, DEVOLUCAO ETC
    PRIMARY KEY (ID_VENDA, SEQ_ITEM)
);
-- REFERENCIA A TABELA PAI (VENDA)
ALTER TABLE ITEM_VENDA ADD CONSTRAINT ITEM_VENDA_FK FOREIGN KEY (ID_VENDA) REFERENCES VENDA (ID_VENDA);

-- INSERE UM ITEM PARA A VENDA
INSERT INTO ITEM_VENDA (ID_VENDA, SEQ_ITEM, COD_PRODUTO, COD_DEPOSITO, QT_ITEM, TIPO_OPERACAO) 
VALUES (1, 1, 997898, 1, 3, 'B');
COMMIT;

--TABELA DE LOG DA INTEGRACAO QUE SERA UTILIZADA NA PROCEDURE QUE INTEGRA AS MOVIMENTACOES DE ESTOQUE AO ERP ARMAZENA O RETORNO DA API
CREATE TABLE LOG_INTEGRACAO_ERP (
    ID NUMBER,
    RETORNO_API CLOB,
    STATUS_CODE VARCHAR2(5)
);

-- SEQUENCE PARA ID AUTOMATICO DOS LOGS
DROP SEQUENCE LOG_SEQ;
CREATE SEQUENCE LOG_SEQ
 START WITH     1
 INCREMENT BY   1
 NOCACHE
 NOCYCLE;

--TRIGGER PARA ID AUTOMATICO DOS LOGS
DROP TRIGGER AUD_LOG;
CREATE TRIGGER AUD_LOG
BEFORE INSERT ON LOG_INTEGRACAO_ERP
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        --BUSCA O ID DA SEQUENCE CRIADA
        IF :NEW.ID IS NULL THEN
            SELECT LOG_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
        END IF;
    END IF;
END;

--PROCEDURE RESPONSAVEL POR INTEGRAR A VENDA COM A MOVIMENTACAO DE ESTOQUE NO ERP ATRAVES DA API CRIADA
CREATE OR REPLACE PROCEDURE MOVIMENTA_ESTOQUE_ERP(PCOD_PRODUTO IN NUMBER, 
                                                  PCOD_DEPOSITO IN NUMBER,
                                                  PQT_ITEM IN NUMBER,
                                                  PTIPO_OPERACAO IN VARCHAR2)
IS
    CONTEUDO VARCHAR2(4000);
    RETORNO VARCHAR2(32000);
    STATUS_RETORNO VARCHAR2(3);
    RESP DBMS_CLOUD_TYPES.RESP;
    ENDPOINT VARCHAR2(4000) := 'https://americanas-backend-api.herokuapp.com/movimentaestoque/';
    BUFFER VARCHAR2(4000);
BEGIN
    SELECT JSON_OBJECT('cod_produto' VALUE PCOD_PRODUTO,
                       'cod_deposito' VALUE PCOD_DEPOSITO,
                       'qt_movimento' VALUE PQT_ITEM,
                       'cd_tipo_operacao' VALUE PTIPO_OPERACAO
                       )
    INTO CONTEUDO
    FROM DUAL;
    
    RESP := DBMS_CLOUD.SEND_REQUEST( URI => ENDPOINT,
                                     METHOD => 'POST',
                                     BODY => UTL_RAW.CAST_TO_RAW(CONTEUDO)
                                    );
    RETORNO :=  DBMS_CLOUD.GET_RESPONSE_TEXT(RESP);
    STATUS_RETORNO := DBMS_CLOUD.GET_RESPONSE_STATUS_CODE(RESP);
    
    --SALVA O RETORNO DA API EM UMA TABELA DE LOGS
    INSERT INTO LOG_INTEGRACAO_ERP(ID, RETORNO_API, STATUS_CODE) VALUES (NULL, RETORNO, STATUS_RETORNO); 
    
END MOVIMENTA_ESTOQUE_ERP;

--TESTE DA PROCEDURE
BEGIN
   MOVIMENTA_ESTOQUE_ERP(9850149,15,1,'B');
END;

--CHECA LOG DA INTEGRACAO
SELECT * FROM LOG_INTEGRACAO_ERP;

-- POR FIM A TRIGGER QUE FARÁ A INTEGRACAO AUTOMATICA DAS VENDAS COM O ESTOQUE
CREATE OR REPLACE TRIGGER MOVIMENTA_ESTOQUE_VENDA
AFTER INSERT ON ITEM_VENDA
FOR EACH ROW
DECLARE
    V_CUPOM VENDA.COD_CUPOM%TYPE;
BEGIN
    IF INSERTING THEN
        SELECT COD_CUPOM
        INTO V_CUPOM
        FROM VENDA
        WHERE ID_VENDA = :NEW.ID_VENDA;
        
        -- SE TEM O CUPOM CHAMA A PROCEDURE QUE VAI FAZER O POST NA API QUE POR SUA VEZ INSERE O REGISTRO NO BANCO DE DADOS DO ERP
        IF V_CUPOM IS NOT NULL THEN
            MOVIMENTA_ESTOQUE_ERP(:NEW.COD_PRODUTO, :NEW.COD_DEPOSITO, :NEW.QT_ITEM, :NEW.TIPO_OPERACAO);
        END IF;
    END IF;
END;

--TESTANDO INSERÇÕES NAS VENDAS
INSERT INTO ITEM_VENDA (ID_VENDA, SEQ_ITEM, COD_PRODUTO, COD_DEPOSITO, QT_ITEM, TIPO_OPERACAO) 
VALUES (1, 1, 9875489, 15, 3, 'B');
INSERT INTO ITEM_VENDA (ID_VENDA, SEQ_ITEM, COD_PRODUTO, COD_DEPOSITO, QT_ITEM, TIPO_OPERACAO) 
VALUES (1, 2, 98754, 2, 3, 'B');
INSERT INTO ITEM_VENDA (ID_VENDA, SEQ_ITEM, COD_PRODUTO, COD_DEPOSITO, QT_ITEM, TIPO_OPERACAO) 
VALUES (1, 3, 789456, 1, 3, 'B');
INSERT INTO ITEM_VENDA (ID_VENDA, SEQ_ITEM, COD_PRODUTO, COD_DEPOSITO, QT_ITEM, TIPO_OPERACAO) 
VALUES (1, 4, 9875466, 5, 3, 'B');
COMMIT;

--LOG DAS INTEGRACOES
SELECT * FROM LOG_INTEGRACAO_ERP